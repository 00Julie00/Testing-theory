Требования - это что?
Требование – описание того, какие функции и с соблюдением каких условий должно выполнять приложение в процессе решения для пользователя задачи.

Для чего нужен Анализ требований в разработке программного обеспечения?

- Позволяют понять, что и с соблюдением каких условий система должна делать
- Предоставляют возможность оценить масштаб изменений и управлять изменениями;
- Являются основанием для формирования плана проекта ( в том числе плана тестирования);
- Помогают предотвращать или разрешать конфликтные ситуации;
- Упрощают расстановку приоритетов в наборе задач;
- Позволяют объективно оценить прогресс в разработке проекта;

А в долгосрочной перспективе это дает следующее:

- Устанавливается 100% взаимопонимание между всеми членами команды;
- Сокращаются финансовые затраты;
- Снижается риск неработоспособного и забагованного продукта;
- Сокращается время разработки.

Перечислите Виды требований
Классификация по К.Вигерсу

1. Бизнес-требования (business requirements) выражают цель, ради которой разрабатывается продукт (зачем вообще он нужен, какая от него ожидается польза, как заказчик с его помощью будет получать прибыль). Результатом выявления требований на этом уровне является общее видение (vision and scope) - документ, который, как правило, представлен простым текстом и таблицами. Здесь нет детализации поведения системы и иных технических характеристик, но вполне могут быть определены приоритеты решаемых бизнес-задач, риски и т.п. 
Пример:  Нужен инструмент, в реальном времени отображающий наиболее выгодный курс покупки и продажи валюты.


2. Пользовательские требования (user requirements) описывают задачи, которые пользователь может выполнять с помощью Пользовательские требования оформляются в виде вариантов использования (use cases), пользовательских историй (user stories), пользовательских сценариев (user scenarios).
Пример: При первом входе пользователя в систему должно отображаться лицензионное соглашение
Функциональные требования (functional requirements) описывают поведение системы, т.е. ее действия (вычисления, преобразования, проверки, обработку и т.д.). В контексте проектирования функциональные требования в основном влияют на дизайн системы. Стоит помнить, что к поведению системы относится не только то, что система должна делать, но и то, что она не должна делать (например: «приложение не должно выгружать из оперативной памяти фоновые документы в течение 30 минут с момента выполнения с ними последней операции»). 

Перечислите Функциональные уровни требований
Классификация по К.Вигерсу

К функциональным требованиям относят:
1.1. Бизнес-требования. Что система должна делать с точки зрения бизнеса. Слово «бизнес» в данном контексте ближе к слову «заказчик». Пример бизнес-требования: промо-сайт, привлекающий внимание определенной аудитории к определенной продукции компании.

1.2. Пользовательские требования – описывают цели/задачи пользователей системы, которые должны достигаться/выполняться пользователями при помощи создаваемой программной системы. Эти требования часто представляют в виде вариантов использования. Иначе говоря, пользовательские требования — это что может сделать пользователь: зарегистрироваться, посмотреть определенную информацию, пересчитать данные по определенному алгоритму и прочее.

1.3. Функциональные требования – определяют функциональность (поведение) программной системы, которая должна быть создана разработчиками для предоставления возможности выполнения пользователями своих обязанностей в рамках бизнес-требований и в контексте пользовательских требований. Другими словами, что будут делать разработчики, чтобы выполнить пользовательские требования.

1.4. В группу функциональных требований относят и Системные требования. Эти характеристики могут описывать требования как к аппаратному обеспечению (тип и частота процессора, объем оперативной памяти, объём жёсткого диска), так и к программному окружению (операционная система, наличие установленных системных компонентов и сервисов и т. п.). Обычно такие требования составляются производителем или автором ПО. Например, для сайта: ОС — Windows не ниже XP, браузеры IE не ниже 7.0 и так далее.

Перечислите Нефункциональные уровни требований
Классификация по К.Вигерсу

2.1. Бизнес-правила. Они определяют почему система работать должна именно так, как написано. Это могут быть ссылки на законодательство, внутренние правила заказчика и прочие причины. Часто упускают этот раздел и получается, что некоторые системные решения выглядят нетипичным и совсем неочевидными. Например, многие табачные компании и компании, производящие алкоголь требуют постоянного доказательства того, что промо-сайтами пользуются люди, достигшие определенного возраста. Это бизнес-правило (подтверждение возраста) возникает по требованию этических комитетов заказчика, хотя и несколько противоречит маркетинговым целям и требованиям по usability.
2.2. Внешние интерфейсы. Это не только интерфейсы пользователя, но и протоколы взаимодействия с другими системами. Например, часто сайты связаны с CRM системами. Особенности протокола взаимодействия «сайт-CRM» также относятся к нефункциональным требованиям.
2.3. Атрибуты качества. Атрибуты касаются вопросов прозрачности взаимодействия с другими системами, целостности, устойчивости и т.п. К таким характеристикам относятся:
— легкость и простота использования (usability)
— производительность (performance)
— удобство эксплуатации и технического обслуживания (maintainability)
— надежность и устойчивость к сбоям (reliability)
— взаимодействия системы с внешним миром (interfaces)
— расширяемость (scalability)
— требования к пользовательским и программным интерфейсам (user and software interface).
2.4. Ограничения – формулировки условий, модифицирующих требования или наборы требований, сужая выбор возможных решений по их реализации. В частности, к ним могут относиться параметры производительности, влияющие на выбор платформы реализации и/или развертывания (протоколы, серверы приложений, баз данных и т.д.). Ограничения часто основываются на бизнес-правилах.

Перечислите техники сбора требований
Сбор (gathering) и выявление (elicitation) осуществляются с помощью следующих основных техник:

* Интервью. Самый универсальный путь выявления требований, заключающийся в общении проектного специалиста (как правило, бизнес-аналитика) и представителя заказчика (или эксперта, пользователя и т.д.). 
Интервью может проходить в классическом понимании этого слова (беседа в виде «вопрос ответ»), в виде переписки и т.п.

* Работа с фокусными группами. Может выступать как вариант «расширенного интервью», где источником информации является не одно лицо, 
а группа лиц (как правило, представляющих собой целевую аудиторию, и/или обладающих важной для проекта информацией, и/или уполномоченных принимать важные для проекта решения).

* Анкетирование. Этот вариант выявления требований вызывает много споров, т.к. при неверной реализации может привести к нулевому результату при объемных затратах. 
В то же время при правильной организации анкетирование позволяет автоматически собрать и обработать огромное количество ответов от огромного количества респондентов. 
Ключевым фактором успеха является правильное составление анкеты, правильный выбор аудитории и правильное преподнесение анкеты.

* Семинары и мозговой штурм. Семинары позволяют группе людей очень быстро обменяться информацией (и наглядно продемонстрировать те или иные идеи), а также хорошо сочетаются с интервью, анкетированием, 
прототипированием и моделированием - в том числе для обсуждения результатов и формирования выводов и решений. Мозговой штурм может проводиться и как часть семинара, и как отдельный вид деятельности. 
Он позволяет за минимальное время сгенерировать большое количество идей, которые в дальнейшем можно не спеша рассмотреть с точки зрения их использования для развития проекта.

* Наблюдение. Может выражаться как в буквальном наблюдении за некими процессами, так и во включении проектного специалиста в эти процессы в качестве участника. 
С одной стороны, наблюдение позволяет увидеть то, о чём (по совершенно различным соображениям) могут умолчать интервьюируемые, анкетируемые и представители фокусных групп, 
но с другой - отнимает очень много времени и чаще всего позволяет увидеть лишь часть процессов.

* Прототипирование. Состоит в демонстрации и обсуждении промежуточных версий продукта (например, дизайн страниц сайта может быть сначала представлен в виде картинок, и лишь затем сверстан). 
Это один из лучших путей поиска единого понимания и уточнения требований, однако он может привести к серьезным дополнительным затратам при отсутствии специальных инструментов (позволяющих быстро создавать прототипы) и 
слишком раннем применении (когда требования еще не стабильны, и высока вероятность создания прототипа, имеющего мало общего с тем, что хотел заказчик).

* Анализ документов. Хорошо работает тогда, когда эксперты в предметной области (временно) недоступны, а также в предметных областях, имеющих общепринятую устоявшуюся регламентирующую документацию. 
Также к этой технике относится и просто изучение документов, регламентирующих бизнес-процессы в предметной области заказчика или в конкретной организации, что позволяет приобрести необходимые для лучшего понимания сути проекта знания.

* Моделирование процессов и взаимодействий. Может применяться как к «бизнес-процессам и взаимодействиям» (например: «договор на закупку формируется отделом закупок, визируется бухгалтерией и юридическим отделом…»), 
так и к «техническим процессам и взаимодействиям» (например: «платежное поручение генерируется модулем “Бухгалтерия”, шифруется модулем “Безопасность” и передаётся на сохранение в модуль “Хранилище”»). 
Данная техника требует высокой квалификации специалиста по бизнес-анализу, т.к. сопряжена с обработкой большого объема сложной (и часто плохо структурированной) информации.

* Самостоятельное описание. Является не столько техникой выявления требований, сколько техникой их фиксации и формализации. 
Очень сложно (и даже нельзя!) пытаться самому «придумать требования за заказчика», но в спокойной обстановке можно самостоятельно обработать собранную информацию и аккуратно оформить ее для дальнейшего обсуждения и уточнения.

 Что такое Спецификация требований программного обеспечения  (SRS)?

Спецификация требований к программному обеспечению (SRS - Software Requirement Specification): представляет собой документ, подготовленный группой системных аналитиков (system analysts), который используется для описания программного обеспечения, 
которое будет разработано, основной бизнес-цели и функциональности определенного продукта, а также того, как он выполняет свои основные функции. 
SRS также является основой контракта с заинтересованными сторонами (пользователями / клиентами), который включает в себя все подробности о функциональности будущего продукта и о том, как он должен работать. 
SRS включает как функциональные, так и нефункциональные требования, а также варианты использования. В идеальном документе SRS учитывается не только то, как программное обеспечение будет взаимодействовать 
с другим программным обеспечением или когда оно встроено в оборудование, но также потенциальных пользователей и способы их взаимодействия с программным обеспечением. Он также содержит ссылки на таблицы и диаграммы, чтобы получить 
четкое представление обо всех деталях, связанных с продуктом. Этот документ также позволяет минимизировать затраты и время на разработку программного обеспечения.

Что такое Use Case? Приведите пример Use Case.

Use Case (сценарий использования) является подробным описанием взаимодействия между системой и ее пользователями. Он представляет собой набор шагов, которые пользователь выполняет для достижения определенной цели. 
Use Case подробно описывает акторов (пользователей или системы), взаимодействующих с системой, а также последовательность действий, которые они совершают. 
На основе вариантов использования часто составляется диаграмма прецедентов (Use Case UML Diagram), в которой отражается набор вариантов использования и акторов, взаимодействующих с системой.

Пример: Регистрация на сайте:
Пользователь - Кликает по кнопке регистрации.
Система - Открывает форму для регистрации.
Пользователь - Заполняет формы, указывает данные, подтверждает согласие на обработку данных и жмет на кнопку.
Система - Проверяет корректность заполнения, вносит пользователя в базу данных, отправляет на почту письмо со ссылкой для активации аккаунта.
Пользователь - Открывает письмо, переходит по ссылке, подтверждая активацию.
Система - Активирует аккаунт, высылает инструкцию по работе с сайтом или приложением.
Результат: пользователь создает аккаунт с личным кабинетом.

Перечислите Характеристики качества требований. Приведите пример к каждой Характеристике качества требований

Завершенность (completeness). Требование является полным и законченным с точки зрения представления в нем всей необходимой информации, ничто не пропущено по соображениям «это и так всем понятно». 
Пример: Приведённые ссылки точно указывают на конкретный    раздел. Например «см. раздел 123.12», а не  «см. выше».

Атомарность, единичность (atomicity). Требование является атомарным, если его нельзя разбить на отдельные требования без потери завершенности и оно описывает одну и только одну ситуацию. 
Пример: «При входе пользователя в систему, отображается поп-ап с приветствием»

Непротиворечивость, последовательность (consistency). Требование не должно содержать внутренних противоречий и противоречий другим требованиям и документам. 
Пример: «712.a Кнопка “Close” всегда должна быть красной #ff346» 

Недвусмысленность (unambiguousness, clearness). Требование должно быть описано без использования жаргона, неочевидных аббревиатур и расплывчатых формулировок, должно допускать только однозначное объективное понимание и быть атомарным в плане невозможности различной трактовки сочетания отдельных фраз.
Пример: «приложение должно поддерживать передачу данных в объеме  мин 50 Мб макс 1 Гб» 

Выполнимость (feasibility). Требование должно быть технологически выполнимыми реализуемым в рамках бюджета и сроков разработки проекта. 
АнтиПример: «система поиска должна заранее предусматривать все  возможные варианты поисковых запросов и кэшировать их результаты»

Обязательность, нужность (obligatoriness) и актуальность (up-to-date). Если требование не является обязательным к реализации, оно должно быть просто исключено из набора требований. Если требование нужное, но «не очень важное», для указания этого факта используется указание приоритета (см. «проранжированность по…»). 

Прослеживаемость (traceability). Прослеживаемость бывает вертикальной (vertical traceability) и горизонтальной (horizontal traceability). Вертикальная позволяет соотносить между собой требования на различных уровнях требований, горизонтальная позволяет соотносить требование с тест-планом, тест-кейсами, архитектурными решениями и т.д. Для обеспечения прослеживаемости часто используются специальные инструменты по управлению требованиями (requirements management tool) и/или матрицы прослеживаемости (traceability matrix). 
Пример: Требования пронумерованы, структурированы, имеют оглавления, имеют работающие перекрестные ссылки;

Модифицируемость (modifiability). Это свойство характеризует простоту внесения изменений в отдельные требования и в набор требований. Можно говорить о наличии модифицируемости в том случае, если при доработке требований искомую информацию легко найти, а ее изменение не приводит к нарушению иных описанных в этом перечне свойств. 
Пример: Требования атомарны и прослеживаемые, а потому их изменение не порождает противоречивость.

Проранжированность по важности, стабильности, срочности (ranked for importance, stability, priority).

Корректность (correctness) и проверяемость (verifiability). Фактически эти свойства вытекают из соблюдения всех вышеперечисленных (или можно сказать, что они не выполняются, если нарушено хотя бы одно из вышеперечисленных). В дополнение можно отметить, что проверяемость подразумевает возможность создания объективного тест-кейса (тест-кейсов), однозначно показывающего, что требование реализовано верно и поведение приложения в точности соответствует требованию. 
Пример: Требования к приложению, а не к пользователю (например: «пользователь должен быть в состоянии отправить сообщение» - увы, мы не можем влиять на состояние пользователя).

Что такое Пользовательские истории(User story)? Приведите пример Пользовательских историй(User story)
User Story (пользовательская история) - это краткое описание требований, сфокусированное на потребностях пользователя. 
User Story описывает, что должно быть сделано и для кого, а также почему это нужно. Он состоит из трех основных компонентов: карточка с описанием, конверсация между разработчиками и заказчиками 
для уточнения деталей и набор тестов, которые позволяют проверить выполнение требований. User Story часто используется в гибких методологиях разработки, таких как Scrum, для описания требований, которые могут меняться в процессе разработки.

Пример: Я, как пользователь системы, хочу сменить пароль, чтобы предотвратить доступ к системе других лиц, завладевших моим паролем, или чтобы мне было удобнее входить в систему.

Какие преимущества и недостатки Пользовательских историй(User story)?

Преимущества: 
+ User Story сфокусирована на пользователях. Сбор требований и оформление пользовательских историй начинают с интервью и опросов. Это помогает сразу получить обратную связь от пользователей: узнать их точки зрения, боли и потребности.
+ User Story можно обсуждать в команде. Основную часть пользовательской истории формулируют так, чтобы любой участник команды смог предлагать идеи, думая как пользователь. 
+ User Story помогает поэтапно разрабатывать продукт. В историях описывают функции, которые можно разработать и протестировать за одну итерацию, или этап. Поэтому инструмент подходит для итеративной разработки и Agile.

Недостатки: 
- User Story не заменит требований. Если компании нужен документ с требованиями, то пользовательских историй недостаточно. 
User Stories могут не затрагивать важных нефункциональных требований: производительности, масштабируемости и безопасности.

- Если в User Story недостаточно деталей, её можно по-разному интерпретировать. Разночтения возникают, если забыть важные детали или описать их поверхностно. Это может привести к ошибкам в продукте. 

Что такое Критерии приемки(Acceptance criteria)?
Критерии приемки - это условия, которым должен удовлетворять программный продукт, чтобы быть принятым пользователем, заказчиком или, в случае функциональности системного уровня, потребляющей системой. 
Проще говоря - это список деталей (также известных как требования) о том, как новая функция (feature) программного обеспечения должна работать / выглядеть.

Перечислите виды и форматы критерий приемки
Критерии приемки могут быть записаны в различных форматах, а именно: 

1. Ориентированные на сценарий (шаблон Given/When/Then); 
Он рассматривается через последовательность Given/When/Then (GWT) – Дано/Когда/Тогда, которая выглядит следующим образом: 

Дано - заданное предварительное условие 
Когда -  я выполняю какое-то действие 
Тогда -  я ожидаю какой-то результат  

И – используется для продолжения любого из трех предыдущих утверждений. 
Этот подход был унаследован из разработки, ориентированной на поведение (BDD) и предоставляет последовательную структуру, которая помогает тестировщикам определить, 
когда начинать и завершать тестирование конкретной фичи. Он также сокращает время, затраченное на написание тестовых сценариев, так как поведение системы описывается заранее.

2. Ориентированные на правила (шаблон чеклиста); 
Форма, ориентированная на правила, предполагает наличие набора правил, описывающих поведение системы. На основе этих правил можно составить конкретные сценарии.  
Обычно, критерии, составленные с использованием этой формы, выглядят как простой список маркеров.

3. Пользовательские форматы.  
Например, ваши критерии могут быть определены как пример поведения системы. 
Пример: Критерии приемки безопасных паролей:
As3 -  fail -   слишком короткий
As3HHw -  fail - нет спец.символов
FHHD2! -  fail - нет строчных букв
asygt1! -  fail - нет заглавных букв
Fgh!!hy -  fail - нет цифр
This1sGood! - pass - OK

Приведите пример критерий приемки- список правил

Пример 
Пользовательская история: Как пользователь, я хочу использовать поле поиска для ввода названия города, отеля или улицы, чтобы я мог найти подходящие варианты отелей. 
Критерии приемки базового интерфейса поиска:
- Поле поиска размещено в верхней панели. 
- Поиск начинается, когда пользователь щелкает "Поиск". 
- Поле содержит подсказку серым текстом: "Куда вы направляетесь?" 
- Подсказка исчезает, как только пользователь начинает вводить текст. 
- Поиск выполняется, если пользователь вводит город, название отеля, улицу или их комбинацию. 
- Поиск доступен на английском, французском, немецком и украинском языках. 
- Пользователь не может вводить более 200 символов. 
- Поиск не поддерживает специальные символы. Если пользователь ввел специальный символ, отобразить предупреждающее сообщение: "Поисковый запрос не может содержать специальные символы."

Приведите пример критерий приемки- поведенческий сценарий
Пример: 
Пользовательская история: Как пользователь, я хочу иметь возможность восстановить пароль от своей учетной записи, чтобы в случае, если я забыл пароль, я мог получить доступ к своей учетной записи.
Сценарий: Забыт пароль 
Дано: Пользователь переходит на страницу входа  
Когда: Пользователь выбирает опцию <забыл пароль>  
И: Вводит действительный адрес электронной почты для получения ссылки на восстановление пароля  
Тогда: Система отправляет ссылку на указанный адрес электронной почты  
Дано: Пользователь получает ссылку через электронную почту  
Когда: Пользователь переходит по полученной ссылке в электронной почте  
Тогда: Система позволяет пользователю установить новый пароль


Перечислите критерии INVEST для User story

● Independent (с англ. «независимый»). В пользовательской истории лучше описывать одну или несколько независимых функций. Они должны решить проблему пользователя без помощи других инструментов. Например: «Как хозяин домашнего животного, я хочу иметь возможность записывать визиты к ветеринару, чтобы следить за здоровьем питомца и не пропускать приемы». В этой истории описан минимум функций, которые нужны пользователю: приложение должно уметь создавать встречи с ветеринаром и напоминать о них. Эти функции не зависят от других опций и свойств приложения, поэтому их можно разработать и протестировать самостоятельно. 

● Negotiable (с англ. «подлежащий обсуждению»). User Story обязательно нужно обсудить в команде и внести изменения, если потребуется. Без обсуждения есть риск, что команда разработки получит неполное представление о задаче.

● Valuable (с англ. «ценный»). В функции, которую описывает User Story, должна быть реальная ценность для пользователя. Например, возможность следить за здоровьем питомца и планировать посещение ветеринара.

● Estimable (с англ. «поддающийся оценке»). Хорошую User Story можно оценить — понять, сколько времени, ресурсов и денег займёт разработка функции. 

● Small (с англ. «маленький»). История должна быть краткой и емкой. Объемные истории сложнее оценить, и они могут потребовать больше ресурсов на разработку.

● Testable (с англ. «поддающийся тестированию»). С критериями приемки команде разработки будет проще создать нужную функцию. Тестировать историю лучше за один раз — это ещё одна причина, почему в истории не должно быть много деталей.

Назовите типы метрик тестирования. Каковы цели ввода метрик? 
Приведите примеры метрик.

Метрики тестирования используются для отслеживания усилий по обеспечению качества выпускаемого программного кода. 
С их помощью удаётся в численном выражении получить представлении о достижении заданного уровня качества или поставленных целей. 
Визуальное представление результатов формирует наглядную картину процесса тестирования, которая может показать узкие места.

В процессе тестирования метрики используются:

- для отслеживания прогресса команды по срокам проекта, дедлайнам и другим временным отрезкам;
- качественной оценки текущего состояния системы;
- контроля качества процесса тестирования;
- постановки целей и эффективного планирования исходя из понимания существующих проблем.

Метрики тестирования программного обеспечения подразделяются на два типа:
1. Метрики процесса (Process metrics): используются в процессе подготовки и выполнения тестирования.

Продуктивность подготовки тест-кейсов (Test Case Preparation Productivity): используется для расчета количества подготовленных тест-кейсов и усилий (Effort), затраченных на их подготовку. 
Test Case Preparation Productivity = (No of Test Case) / (Effort spent for Test Case Preparation)

Охват тестового дизайна (Test Design Coverage): процент покрытия тест-кейсами требований.
Test Design Coverage = ((Total number of requirements mapped to test cases) / (Total number of requirements)*100

Продуктивность выполнения тестов (Test Execution Productivity): определяет количество тест-кейсов, которые могут быть выполнены в час.
Test Execution Productivity = (No of Test cases executed) / (Effort spent for execution of test cases)

Покрытие выполненных тестов (Test Execution Coverage): предназначено для измерения количества выполненных тест-кейсов по сравнению с количеством запланированных тест-кейсов.
Test Execution Coverage = (Total no. of test cases executed / Total no. of test cases planned to execute)*100

Успешные тест-кейсы (Test Cases Passed): для измерения процента пройденных успешно тест-кейсов. 
Test Cases Pass = (Total no. of test cases passed) / (Total no. of test cases executed) * 100

Неуспешные тест-кейсы (Test Cases Failed): для измерения процента заваленных тест-кейсов. 
Test Cases Failed = (Total no. of test cases failed) / (Total no. of test cases executed) * 100

Заблокированные тест-кейсы (Test Cases Blocked): для измерения процента блокированных тест-кейсов. 
Test Cases Blocked = (Total no. of test cases blocked) / (Total no. of test cases executed) * 100

2. Метрики продукта (Product metrics):

Уровень обнаружения ошибок (Error Discovery Rate): для определения эффективности тест-кейсов. 
Error Discovery Rate = (Total number of defects found /Total no. of test cases executed)*100

Процент выявления дефектов (Defect Detection Percentage (DDP)): Количество дефектов, выявленных в фазе тестирования, поделенное на число дефектов, найденных в этой фазе тестирования, а также во всех последующих фазах. См. также ускользнувший дефект. (ISTQB)

Уровень исправления дефектов (Defect Fix Rate): помогает узнать качество сборки (build) с точки зрения устранения дефектов. 
Defect Fix Rate = (Total no of Defects reported as fixed - Total no. of defects reopened) / (Total no of Defects reported as fixed + Total no. of new Bugs due to fix)*100

Плотность дефектов (Defect Density): количество дефектов, обнаруженных в компоненте или системе, поделенное на размер компонента или системы (выраженный в стандартных единицах измерения, например строках кода, числе классов или функций). (ISTQB)
Defect Density = Total no. of defects identified / Actual Size (requirements)

Утечка дефектов (Defect Leakage): используется для проверки эффективности процесса тестирования перед UAT. 
Defect Leakage = ((Total no. of defects found in UAT)/(Total no. of defects found before UAT)) * 100

Эффективность устранения дефектов (Defect Removal Efficiency): позволяет сравнивать общую (дефекты, обнаруженные до и после поставки) эффективность устранения дефектов. 
Defect Removal Efficiency = ((Total no. of defects found pre-delivery) /( (Total no. of defects found pre-delivery )+ (Total no. of defects found post-delivery)))* 100

Что такое приемка приложения?
Процесс с цель которого определить, удовлетворяет ли приложение критериям приемки или нет, а также дать возможность пользователям, клиентам или другим уполномоченным лицам определить, 
следует ли принимать систему или нет. В основном проверяются функции, чтобы убедиться, что продукт соответствует указанным критериям приемки.

Но также могут проверяться :
   - соответствие продукта бизнес-целям и задачам
   - правила и нормы, установленные правительством страны/    платформы, в которой оно выпускается.
   - совместимости, доступности технической поддержки, надежности, восстановления после сбоя, локализации

Что такое аудит приложения?
Аудит приложения представляет из себя оценочную проверку состояния как продукта целиком, так и отдельных атрибутов качества, на соответствие объективным характеристикам 
и требованиям, которые сформулированы в технической документации либо предполагаются из ожиданий конечных пользователей.
Проверке подлежат все артефакты продукта, а также процессы и сценарии его использования, если это потребуется.
Благодаря поэтапному анализу компонентов и процессов, выдается заключение о качестве самого ПО, качестве исходного кода, имеющихся автотестов, корректности документации, 
готовности приложения к запуску в эксплуатацию, а также выявляются потенциально проблемные области.

Этапы проведения аудита.
Этапы процесса проведения аудита:

- Анализ этапов процесса разработки
- Определение позитивных факторов в процессе разработки
- Определение неэффективных факторов в процессе разработки
- Определение рисков на каждом этапе с целью минимизировать их с помощью инструментов риск-менеджмента
- Составление списка ключевых регламентов и приведение их к единому виду
- Разработка поэтапного и эффективного процесса создания и изменения продукта

Для реализации этих этапов следует выполнить еще несколько шагов:

- Ознакомиться с проектом и проанализировать его
- Пообщаться с основной командой разработчиков
- Узнать, как работают смежные команды внутри компании
- Определить, как работают подрядчики на аутсорсе
- Выявить конфликты и неоптимальные решения, предложить изменения и доработать их вместе с командами
- Создать новые регламенты и разработать дорожную карту релиза

Чем приемка приложения отличается от аудита?

Аудит затрагивает все этапы процесса разработки, начиная с самого раннего. Проверяются и выявляются возможные риски на каждом из этапов. Происходит активная коммуникация со всеми участниками команды разработки. 
В приемке же процессы сосредоточены на соответствие конечного продукта ТЗ и ожиданиям заказчика. 

