Что такое Ошибка/Дефект/Отказ?
Баг — это ситуация, возникающая, когда продукт (приложение) не соответствует утвержденным ранее требованиям. 
Если где-то в коде допущена ошибка, она провоцирует «поломку» кода, и приложение работает некорректно. Такую ситуацию тестировщики называют багом.

Дефект - Под дефектом в тестировании ПО понимается отклонение или несоответствие программного обеспечения требованиям. Дефекты возникают, когда разработчик допускает какую-либо ошибку в коде. 
Дефект, обнаруженный во время выполнения, может привести к отказам компонента или системы.

Ошибка возникает из-за неправильной логики в коде или синтаксиса, что может существенно повлиять на работу приложения. 
Ошибка вычисляется по разнице между ожидаемым и фактическим результатами. Часто это ситуация, которая происходит когда разработчики неправильно понимают требования к продукту, и это приводит к дефектам.

Fault (сбой) - Ситуация, когда приложение не может правильно функционировать. Например, из-за недостатка свободной памяти или места на диске, или невыполнения каких-то нужных действий.

Failure (отказ) - Сочетание дефектов, которые приводят к полному отказу приложения, обычно с потерей данных, в том числе критически важных; система не реагирует на действия пользователя. 
Обычно такие ситуации происходят редко — перед релизом продукта тестируются возможные сценарии.

Перечислите Основные типы багов?

Существует большое кол-во классификаций. Приведу следующую:

1. Дефекты требований и спецификаций (Requirements and Specifications Defects). Сюда входят:

- Дефекты функционального описания: Общее описание того, что делает продукт и как он должен себя вести 
- Дефекты функций связаны с отсутствием, неправильным, неполным или ненужным описанием функций
- Дефекты взаимодействия функций
- Дефекты описания интерфейсов: это дефекты, которые возникают в описании взаимодействия целевого программного обеспечения с внешним программным обеспечением, оборудованием и пользователями.
- Дефекты дизайна: Дефекты дизайна возникают когда неправильно спроектированы: Они включают дефекты в конструкции алгоритмов, управления, логики, элементов данных, описаний интерфейсов модулей и описаний внешнего программного обеспечения / оборудования / пользовательского интерфейса.

2. Дефекты кода: возникают из-за ошибок при реализации кода. Классы дефектов кодирования аналогичны классам дефектов дизайна. 
Некоторые дефекты кодирования возникают из-за непонимания конструкций языка программирования и недопонимания с разработчиками.

3. Дефекты тестирования: Планы тестирования, тестовые наборы, средства тестирования и процедуры тестирования также могут содержать дефекты. 
Сюда входят неправильные, неполные, отсутствующие, не соответствующие тестовые примеры и процедуры тестирования.

Перечислите “Хитрые баги”?

Это сложные и редко встречаемые баги, зачастую которые сложно воспроизвести.

* Гейзенбаг - баги, которые исчезают или меняют свое поведение, как только вы пытаетесь их локализовать и внимательнее изучить? Например, мы тестируем программу и натыкаемся  на ошибку, 
которая крашит приложение каждый раз, при попытке  ее воспроизвести. Однако, когда запускается отладка, ошибка таинственным образом исчезает, и приложение работает безупречно.
Для отлова бага следует тщательнее собирать и по возможности внимательнее проверять всю релевантную информацию (логи). Также помогает воспроизведение бага в другой тестовой среде или системе.

Пример гейзенбага: Пользователь пожаловался в техподдержку: баланс его счета иногда отображается некорректно. Но при многократных попытках воспроизвести этот баг — баланс постоянно отображает правильное значение!

Борбаг - баги, которые предпочитают «прятаться в темных закоулках» программы. В отличие от гейзенбагов, они сохраняют свое некорректное поведение постоянно — но только при определенных условиях, или при определенных входных данных. 
Для борьбы с борбагами нужно проводить тщательное тестирование с различными типами входных данных, уделяя внимание редким (граничным) сценариям-кейсам, нестандартным пользовательским путям, и негативному тестированию.

Пример борбага: Функция в приложении выдает ошибку только при очень медленном сетевом подключении.

Мандельбаг - Подобные баги характеризуются чрезвычайно сложным  или непредсказуемым поведением, чаще всего вызванным глубокими архитектурными дефектами системы. 
Даже изолировать и воспроизвести такие баги — сама по себе сложная задача; этим они походят на гейзенбаги. При работе с мандельбагами необходимо сосредоточиться на тщательном изучении архитектуры и дизайна системы. 
Как можно более полно документируйте поведение до и во время такой ошибки, и, совместно с более опытными членами команды, анализируйте причины.

Примеры мандельбагов: В некоторых популярнейших, реально легендарных видеоиграх персонажи застревают в стенах и столбах, оседланные кони стоят в воздухе, машины взлетают в небеса на ровной дороге, тело водителя растягивается на сотню метров. 
И судя по тому, что некоторые критические баги так и не сумели устранить даже спустя несколько лет после релиза известной «игры десятилетия», это самые настоящие мандельбаги.

Шрёдинбаг - это ошибки, которые остаются «лабильными» до тех пор, пока код не будет «вскрыт» и внимательно изучен. Эти баги как бы произвольно «колеблются» между корректным и некорректным состоянием, пока тестировщик не приступит к проверке кода. 
При обнаружении шрёдинбаг следует тщательно документировать действия, которые вызывают их проявление, и особенности среды выполнения. Проверяйте версии кода для выявления изменений, которые могли случайно «тригернуть» дефект.

Пример шрёдинбаг: Функция выдает некорректные результаты только в присутствии в системе конкретного пользователя с определенной конфигурацией и правами.

Лунный баг - Или «баг, зависящий от фазы луны» провоцируется на первый взгляд тривиальным, неопасным параметром времени (дата/время), из-за которого может возникать ошибка. 
Представим критикал-ошибку, возникающую только в один день в году (и в какой — неизвестно), или в определенное время суток, например ночью, или в определенный час и минуту. 
Такие ошибки часто зависят от «глубоко спрятанных» в коде параметров, что затрудняет их обнаружение и воспроизведение.
Для борьбы с «лунными багами» нужно тщательно тестировать функции, зависящие от времени, проверяя различные комбинации даты и времени, разумеется, по возможности автоматизируя этот трудоемкий процесс. 
Мониторьте логи, пытаясь найти какие-то закономерности, связанные с временем и датами, а также моделируйте различные временнЫе сценарии в инструментах которые позволяют это делать.

Пример лунного бага: в приложении магазина код скидки работает нормально в течение всего месяца, а в последний день каждого месяца — почему-то 0.

Гинденбаг - такой тип багов характеризуется не сложностью обнаружения, не «хитростью», как предыдущие баги, а реально катастрофическими последствиями, особенно если речь идет о критически важной инфраструктуре, или убытках на миллиарды долларов.

Баг Хиггса - Специфический тип бага, существование которого предсказано, или предвидится, или он даже был обнаружен, по единичным сообщениям пользователей, но на практике ни тестировщику,
ни разработчику обнаружить его не удается — и все работает идеально.

Приведите пример Blocker bug
Пример: сайт не открывается или выдаёт ошибку при любом действии.

Приведите пример Critical bug
Пример: В интернет-магазине не работает функция оплаты картой. Заказ можно оформить, но для оплаты приходится связываться с менеджерами.

Приведите пример Major bug
Пример: При нажатии на кнопку «Оставить почту и получить скидку», пользователю автоматически назначается скидка даже если он не оставил контакты.

Приведите пример Minor bug
Пример: Неправильно масштабируется рекламный баннер при уменьшении окна.

Приведите пример Trivial bug
Пример: опечатки в тексте или лишняя фотография в карточках товаров.

Какой жизненный цикл Bug report?

1. Тестировщик находит баг. Статус, присвоенный багу – “Новый”.
2. Баг передается менеджеру проекта для анализа. Менеджер проекта решает, является ли баг действительным.
3. Если баг недействителен – менеджер проекта присваивает багу статус “Отклонен”.
4. Если баг не отклонен, то следующим шагом будет проверка того, находится ли он в области действия. Предположим, у нас есть еще одна фича – функционал электронной почты для того же приложения, и вы обнаружили проблему с ней. 
Но она не является частью текущего релиза. Таким дефектам присваивается статус отложенных.
5. Далее менеджер проверяет, не публиковался ли подобный баг ранее. Если да, ему присваивается статус дубликата. 
Если нет, баг назначается разработчику, который приступает к исправлению кода. На этом этапе багу присваивается статус “В процессе”.
6. Исправив код, разработчик присваивает багу статус “Исправлен”.
7. Далее тестировщик повторно тестирует код. В случае, если тест-кейс проходит, дефект закрывается. 
8. Если тест-кейсы снова не работают, дефект снова открывается и передается разработчику.

Какие основные цели локализации дефекта?
Локализация дефекта — процесс, направленный на анализ проблемы, с целью максимально‑возможной детализации причины ее возникновения.
Позволяет определить причинно-следственные связи возникновения дефекта, его возможного влияния на другие связанные компоненты системы, экономит время команды для устранения.

Где могут находиться дефекты?
Дефекты могут находиться как на серверной части так и на клиентской, при взаимодействии ПО с модулями внешнего ПО.

Перечислите методы локализации дефекта в клиентской части


Перечислите методы локализации дефекта в серверной части

