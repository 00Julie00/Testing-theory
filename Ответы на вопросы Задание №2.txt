Что такое проект?
Проект — предприятие с определенными датами начала и завершения, предпринятое для создания продукта или услуги (сервиса) в соответствии с заданными ресурсами и требованиями

Из каких этапов состоит Waterfall model/Каскадная модель?
Одна из самых старых, подразумевает последовательное прохождение стадий, каждая из которых должна завершиться полностью до начала следующей. В модели Waterfall легко управлять проектом. Благодаря её жесткости, разработка проходит быстро, стоимость и срок заранее определены.
Этапы:
1. Этап сбора требований. Собер у заказчика информации о деталях и спецификациях желаемого программного обеспечения.
2. Этап проектирования. Планирование языка программирования (Java, PHP, .net), базы данных (Oracle, MySQL и др.). которые подойдут для данного проекта, а также некоторые высокоуровневые функции и архитектуру.
3. Этап сборки. Этап представляет собой написание кода программного обеспечения.
4. Этап тестирования. Проведение  тестирования программного обеспечения с целью проверки того, что оно создано в соответствии со спецификацией, предоставленной заказчиком.
5. Этап развертывания. Развертывание приложения в соответствующей среде.
6. Стадия сопровождения. После того как система готова к использованию, в дальнейшем может потребоваться изменение кода по требованию заказчика.

Когда использовать каскадную методологию?
- Когда требования известны, понятны и зафиксированы. Противоречивых требований не имеется.
- Нет проблем с доступностью программистов нужной квалификации.
- Используется в авиастроении, военной или космической отрасли, медицине и финансовый секторе. 

Какие преимущества и недостатки Waterfall model/Каскадной модели?
Преимущества:
+ Все фазы проекта строго регламентированы и выполняются в четкой последовательности
+ Требования к проекту не изменяются на протяжении всего цикла
+ Хорошо определена процедура по контроля качества
+ Строго фиксированное выполнение всех стадий проекта позволяет планировать ресурсы и сроки завершения работ.
Недостатки:
- Поскольку требования неизменны и должны быть четко сформулированы в начале жизненного цикла, часто возникают сложности при их написании.
- Заказчик не может убедиться в качестве продукта до полного завершения его разработки.
- Watrefall проект должен постоянно иметь актуальную документацию. Иногда она бывает избыточной.
- Очень не гибкая методологии.
- У Пользователя нет возможности привыкать к продукту постепенно
- Участие пользователей ПО в ней либо не предусмотрено вообще, либо предусмотрено лишь косвенно на стадии однократного сбора требований. С точки зрения же тестирования эта модель плоха тем, что тестирование в явном виде появляется здесь лишь с середины развития проекта, достигая своего максимума в самом конце.
- Отсутствует возможность учесть переделку, весь проект делается за один раз.
- Продукты, разработанные по данной модели без обоснованного ее выбора, могут иметь недочеты (список требований нельзя скорректировать в любой момент), о которых становится известно лишь в конце из-за строгой последовательности действий. 
- Стоимость внесения изменений высока, так как для ее инициализации приходится ждать завершения всего проекта. Тем не менее, фиксированная стоимость часто перевешивает минусы подхода.


Из каких этапов состоит V-model/V- модель?
V-модель – Модель, описывающая процессы жизненного цикла разработки ПО с момента составление спецификации требований до этапа сопровождения. 
V модель показывает интеграцию процессов тестирования в каждую фазу цикла разработки программного обеспечения. (ISTQB) Например, во время кодирования пишутся модульные тесты.
Очень упрощенно можно сказать, что при использовании v-образной модели на каждой стадии «на спуске» нужно думать о том, что и как будет происходить на соответствующей стадии «на подъёме». Тестирование здесь появляется уже на самых ранних стадиях развития проекта, что позволяет минимизировать риски, а также обнаружить и устранить множество потенциальных проблем до того, как они станут проблемами реальными.


Когда использовать V-model/V- модель?
V-образная модель применима к системам, которым особенно важно бесперебойное функционирование. 
Например, прикладные программы в клиниках для наблюдения за пациентами, интегрированное ПО для механизмов управления аварийными подушками безопасности в транспортных средствах и так далее. 
Для малых и средних проектов, где требования четко определены и фиксированы.
Преимущества:
+ Пользователи V-Model участвуют в разработке и поддержке V-модели. 
+ На старте любого проекта V-образная модель может быть адаптирована под этот проект, так как эта модель не зависит от типов организаций и проектов.
+ Процесс выполнения по строго регламентированным этапам, каждый из которых будет включать в себя необходимые для него действия.
+ Низкий уровень риска и избавление от потенциально возможных багов еще на начальных этапах благодаря раннему тестированию.
Недостатки:
- Отсутствие действий, анализирующих риски;
- Невозможность адаптации к новым требованиям заказчика;
- Процесс разработки длиться долго (иногда даже годами). Как результат, продукт теряет свою актуальность для заказчика.
- Организация и выполнение управления, обслуживания, ремонта и утилизации системы не учитываются в V-модели. Однако, планирование и подготовка к этим операциям моделью рассматриваются.
- V-образная модель больше касается разработки программного обеспечения в проекте, чем всей организации процесса.

Из каких этапов состоит Iterative model/Итеративная модель?
Итеративная модель разработки (iterative development model) - Модель жизненного цикла разработки, в которой проект разделен обычно на большое количество итераций. 
Итерация это полный цикл разработки, завершающийся выпуском рабочего продукта, являющегося частью конечного разрабатываемого продукта, который разрастается от итерации к итерации.(ISTQB)

Ключевой особенностью данной модели является разбиение проекта на относительно небольшие промежутки (итерации), каждый из которых в общем случае может включать в себя все классические стадии, присущие водопадной и v-образной моделям.
Итогом итерации является приращение (инкремент) функциональности продукта, выраженное в промежуточном билде (build).

Отличие от инкрементной модели: В инкрементной модели функционал продукта наращивается по кусочкам, продукт составляется из частей. В отличие от итерационной модели, каждый кусочек в инкрементной модели представляет собой целостный элемент.

Когда использовать Iterative model/Итеративной модели?
- Требования к конечной системе заранее четко определены и понятны.
- Проект большой или очень большой.
- Основная задача должна быть определена, но детали реализации могут эволюционировать с течением времени.

Плюсы и минусы Iterative model/Итеративной модели?
Преимущества:
+ Можно оценить риски, связанные с затратами и дедлайном;
+ Заказчик продукта может прокомментировать его каждую версию;
+ Гибкость и возможность быстро реагировать на изменения
Недостатки:
- Структура системы может нарушаться при постоянных обновлениях;
- Чтобы итерации выделялись, функциональную систему следует определить в начале жизненного цикла;
- График выполнения может не соблюдаться из-за ограниченности ресурсов (материальных, исполнительных).
- Высокие накладные расходы, вызванные высокой «бюрократизированностью» и общей громоздкостью модели

Agile - это?
Гибкая методология разработки программного обеспечения (agile software development) - Группа методологий разработки ПО, основанных на итеративной поэтапной разработке, где требования и решения развиваются посредством сотрудничества между самоорганизующимися межфункциональными командами. (ISTQB)
Одна вещь, которая отличает Agile от других подходов к разработке программного обеспечения, - это сосредоточение внимания на людях, выполняющих работу, и на том, как они работают вместе. 
Решения развиваются в результате сотрудничества между самоорганизующимися кросс-функциональными командами, использующими соответствующие методы для своего контекста. 

Отличие от других методологий:
В основе традиционных методологий — жесткое планирование и предсказуемость. Такие подходы часто привычнее и безопаснее. Они подходят для стабильной и предсказуемой работы. 
Однако традиционное планирование мало приспособлено к неожиданным изменениям и не годится для новаторских проектов. В Agile процесс разбит на короткие периоды. 
Каждая итерация приводит к результату, который можно презентовать заказчику. Планы могут корректироваться, и аджайл помогает приспособиться к изменениям.

Agile манифест - это?
Agile Manifesto — ключевой документ, в котором перечислены фундаментальные идеи и положения методологии разработки программного обеспечения. Их сформулировали эксперты в области информационных технологий в феврале 2001 года. 
С тех пор существует The Agile Alliance — сообщество, которое развивает и продвигает методологию. Манифест состоит из четырех ценностей и двенадцати принципов. 

Какие ценности Agile манифест?
Ценности Agile-манифеста таковы:
- Люди и взаимодействие важнее процессов и инструментов
- Работающий продукт важнее исчерпывающей документации
- Сотрудничество с заказчиком важнее согласования условий контракта
- Готовность к изменениям важнее следования первоначальному плану


Основные принципы Agile манифест?
Основополагающие принципы Agile Manifesto:
- Наивысшим приоритетом признается удовлетворение заказчика за счет ранней и бесперебойной поставки ценного программного обеспечения
- Изменение требований приветствуется даже в конце разработки (это может повысить конкурентоспособность полученного продукта);
- Частая поставка работающего программного обеспечения (каждые пару недель или пару месяцев с предпочтением меньшего периода);
- Общение представителей бизнеса с разработчиками должно быть ежедневным на протяжении всего проекта;
- Проекты следует строить вокруг заинтересованных людей, которых следует обеспечить нужными условиями работы, поддержкой и доверием;
- Самый эффективный метод обмена информацией в команде - личная встреча;
- Работающее программное обеспечение - лучший измеритель прогресса;
- Спонсоры, разработчики и пользователи должны иметь возможность поддерживать постоянный темп на неопределённый срок;
- Постоянное внимание к техническому совершенству и хорошему проектированию увеличивают гибкость;
- Простота как искусство не делать лишней работы очень важна;
- Лучшие требования, архитектура и проектные решения получаются у самоорганизующихся команд;
- Команда регулярно обдумывает способы повышения своей эффективности и соответственно корректирует рабочий процесс.


Scrum - это? (опишите подробно)
Scrum - наиболее популярный Agile-фреймворк, для многих людей эти термины являются синонимами. Scrum - это фреймворк процесса, используемый для управления разработкой продукта и другой работой, связанной с знаниями. 
Скрам является эмпирическим в том смысле, что дает командам возможность установить гипотезу о том, как они думают, что что-то работает, опробовать это, проанализировать полученный опыт и внести соответствующие коррективы. 
Скрам структурирован таким образом, чтобы команды могли использовать практики из других фреймворков, которые имеют смысл для контекста команды.
Scrum лучше всего подходит в случае, когда кросс-функциональная команда работает в среде разработки продукта, где есть нетривиальный объем работы, которую можно разделить на более чем одну 2-4-недельную итерацию.

Ценности:
- Преданность (Commitment): Члены команды лично привержены достижению целей команды;
- Смелость (Courage): Члены команды поступают правильно и работают над сложными проблемами;
- Сфокусированность (Focus): Сконцентрируйтесь на работе, намеченной для спринта, и целях команды;
- Открытость (Openness): Члены команды и заинтересованные стороны открыто рассказывают обо всей работе и проблемах, с которыми сталкивается команда;
- Уважение (Respect): Члены команды уважают друг друга за способности и независимость.

Принципы:
- Прозрачность (Transparency): Команда должна работать в среде, где каждый знает, с какими проблемами сталкиваются другие члены команды. Команды выявляют проблемы внутри организации, часто возникающие в течение длительного времени, которые мешают успеху команды;
- Инспекция (Inspection): Частые контрольные точки встроены в структуру, чтобы дать команде возможность поразмышлять о том, как работает процесс. Эти контрольные точки включают в себя Daily Scrum meeting и the Sprint Review Meeting;
- Адаптация (Adaptation): Команда постоянно изучает, как идут дела, и проверяет те пункты, которые кажутся бессмысленными.

События:
- Спринт (Sprint): это временной интервал в 2-4 недели, в течение которого команда создает потенциально готовый к поставке инкремент продукта;
- Планирование спринта (Sprint Planning): Команда начинает спринт с обсуждения, чтобы определить, над какими элементами из бэклога продукта (product backlog) они будут работать во время спринта. Конечным результатом планирования спринта является бэклог спринта (Sprint Backlog). Планирование спринта обычно состоит из двух частей. В первой части владелец продукта и остальная часть команды согласовывают, какие элементы бэклога продукта будут включены в спринт. Во второй части планирования спринта команда определяет, как они будут успешно доставлять идентифицированные элементы Product Backlog как часть потенциально возможного инкремента продукта. Команда может определить конкретные задачи, необходимые для этого, если это одна из их практик. Элементы Product Backlog, определенные для доставки, и задачи, если применимо, составляют бэклог спринта. После того, как команда и владелец продукта установят объем спринта, как описано в элементах Product Backlog, никакие дополнительные элементы не могут быть добавлены в журнал Sprint Backlog. Это защищает команду от изменений в рамках этого спринта;
- Ежедневная встреча (Daily Scrum/Meeting): это короткое (обычно не более 15 минут) обсуждение, во время которого команда координирует свои действия на следующий день. Дейли не предназначен для обсуждения статуса или обсуждения проблем;
- Обзор спринта (Sprint Review): в конце спринта вся команда (включая владельца продукта) рассматривает результаты спринта с заинтересованными сторонами продукта. Цель этого обсуждения - обсудить, продемонстрировать и потенциально дать заинтересованным сторонам возможность использовать инкремент для получения обратной связи. Обзор спринта не предназначен для предоставления отчета о состоянии (status report). Отзывы об обзоре спринта помещаются в Product Backlog для дальнейшего рассмотрения;
- Ретроспектива спринта (Sprint Retrospective): в конце спринта после обзора спринта (sprint review) команда (включая владельца продукта) должна подумать о том, как дела шли во время предыдущего спринта, и определить корректировки, которые они могут внести в будущем. Результатом этой ретроспективы является как минимум одно действие, включенное в бэклог следующего спринта;
- Упорядочение бэклога (Grooming);

Артефакты:
- Бэклог продукта (Product Backlog): это упорядоченный список всех возможных изменений, которые могут быть внесены в продукт. Пункты в бэклоге продукта являются вариантами, а не обязательствами, и то, что они существуют в бэклоге продукта, не гарантирует, что они будут доставлены. Владелец продукта постоянно ведет бэклог продукта, включая его содержание, доступность и порядок;
- Бэклог спринта (Sprint Backlog): это набор элементов из бэклога продукта, выбранных для доставки в спринте. После того, как команда определяет задачи, эти задачи необходимо выполнить для достижения цели спринта (Sprint Goal);
- Инкремент (Increment): это набор элементов из бэклога продукта, которые соответствуют Definition of Done к концу спринта. Владелец продукта может решить выпустить дополнение или развить его в будущих Спринтах;
- Критерии Готовности (Definition of Done): это общее соглашение команды о критериях, которым должен соответствовать элемент бэклога продукта, прежде чем он будет считаться выполненным$
- Пользовательские истории (User Story);
- Цель спринта (Sprint Goal);
- Диаграмма сгорания задач (Burndown chart).

Роли:
- Владелец продукта (Product Owner): роль, ответственная перед командой за управлением бэклогом продукта для достижения результатов, к которым стремится команда. 
Роль product owner-а существует в Scrum для решения проблем, когда команда разработки имеет множественные противоречивые направления движения или отсутствие направления вообще в отношении того, что создавать;
- Скрам Мастер (Scrum Master): роль, ответственная перед командой за то, чтобы команда придерживалась гибких ценностей и принципов и следовала процессам и практикам, которые команда согласилась использовать. 
Изначально это имя предназначалось для обозначения кого-то, кто является экспертом в Scrum и, следовательно, может обучать других. Роль обычно не имеет никаких фактических полномочий. Люди, выполняющие эту роль, должны руководить с позиции влияния, часто занимая позицию лидера-слуги (servant-leadership);
- Команда разработки (Development Team): состоит из людей, которые создают инкремент продукта внутри спринта. Основная ответственность команды разработки - обеспечить инкремент, который приносит пользу каждому спринту. 
Как распределить работу, это остается на усмотрение команды в зависимости от условий на тот момент.


Что такое Velocity / Capacity?
Velocity
Производительность Скрам-команды часто называют скоростью, поскольку это буквальный перевод Velocity —англоязычного термина из Scrum. Это величина, отражающая количество работы, которое Скрам-команда может выполнить за один Спринт.  
Это основной показатель, с помощью которого команда оценивает свою эффективность и способность выполнять задачи. Velocity измеряется в единицах работы, таких как истории или задачи, и может быть использован для прогнозирования продолжительности проекта или для определения, сколько работы команда может выполнить в следующем спринте.
Capacity
Capacity, или производительность команды, отражает фактическую доступность команды для работы. Это количество часов или дней, которые каждый член команды может потратить на выполнение задач в течение определенного периода времени. 
Capacity не учитывает все факторы, такие как отпуска, болезни или другие обязательства, которые могут влиять на доступность команды. Этот показатель помогает команде планировать свою работу, учитывая реальные ограничения и возможности каждого члена команды.

Преимущества и недостатки Scrum
Преимущества:
+ Команда работает короткими этапами, на каждом из которых определяет цели и пути их достижения;
+ Команда работает над разными задачами проекта одновременно;
+ Большие задачи разделяют на мелкие, поэтому внести корректировки прямо в процессе работы намного проще, чем в каскадном подходе;
+ Сокращается время на поиск ошибок и объяснение проблем;
+ Минимизация финансовых рисков благодаря оперативной реакции на изменения и устранение ошибок;
+ Каждый член команды четко знает свою задачу, следовательно, повышается уровень ответственности к работе;
+ Присутствует открытый обмен информацией, что делает процесс работы максимально прозрачным;
+ Поддержание высокого уровня мотивации в команде благодаря ежедневной демонстрации достижений
+ Ориентация на клиента и потребности бизнеса. Постоянное улучшение продукта, увеличение его ценности для пользователей.
+ Адаптивность, возможность быстро вносить изменения, гибко реагируя на изменения на рынке или другие важные обстоятельства. Не слепо следовать плану и расписанию, а уметь приоритезировать задачи, в зависимости от потребностей клиентов.
+ Практически не требует менеджерской работы, для настройки процессов есть скрам-мастер. команда самоорганизована и кросс функциональна. Важно мнение каждого члена команды.

Недостатки:
- Успех проекта во многом зависит от скрам-мастера (организатор процесса), квалификации команды и их приверженности своему делу;
- Далеко не всегда можно адаптировать метод скрам под сферу деятельности, поскольку есть проекты, требующие исключительно планового подхода в работе;
- Требует регулярной коммуникации с заказчиком, что порой тормозит процесс из-за невозможности получения обратной связи;
- Сложность внедрения в масштабных и сложных проектах, так как больше подходит для малых и средних.
- Недостаточно проработанная документация, не всегда хватает на это времени. Если на проекте важно скрупулезное ведение документации, то нужно сразу вводить для этого соответствующую роль.
- Опасность навешивания на скрам-мастера менеджерских функций “по старинке”, скрам-мастер фасилитирует процессы, а не распределяет задачи.
- До скрама нужно дорасти, команда должна иметь определенную степень зрелости и сработанности (гибкий ум, мотивированность, взаимное уважение, работа на результат), ведь качество работы каждого члена влияет на производительность команды.


Что такое ретроспектива?
Ретроспектива спринта — это обзор, проводимый после спринта, который играет ключевую роль в методике Agile. Цель ретроспективы спринта — определить, что прошло успешно, а где возникли проблемы, а также выявить области, требующие улучшения.

Kanban- это? (опишите подробно)
Kanban — это популярный подход к реализации принципов agile при разработке ПО. Методика предполагает обсуждение производительности в режиме реального времени и полную прозрачность рабочих процессов. 
Рабочие задачи визуально представлены на доске Kanban, что позволяет участникам команды видеть состояние каждой задачи в любой момент времени.

Ценности kanban:
- прозрачность,
- баланс,
- сотрудничество,
- клиентоориентированность,
- поток,
- лидерство,
- понимание,
- согласие,
- уважение.

Сравнение Kanban  и Scrum:
Скрам – это фреймворк с жесткими правилами и границами. Вы можете использовать разные инструменты и методологии внутри Скрама, но если вы отказались от чего-то обязательного в Скраме, он уже не может считаться Скрамом. 
Канбан – это метод, инструмент с набором практик и принципов. Вы можете использовать все практики, часть практик или не использовать их вообще. 

Методы Kanban:
1. Начните с того, что есть сейчас.
2. Договоритесь об эволюционном развитии.
3. Поощряйте развитие лидерства на всех уровнях.
4. Выясните потребности и ожидания заказчика.
5. Управляйте работой, дайте людям организоваться вокруг нее
6. Развивайте правила, чтобы улучшить показатели.

Основные практики:
- Визуализируйте (имеется ввиду визуализация процесса с помощью Канбан-доски).
- Ограничивайте незавершенную работу.
- Управляйте потоком работы.
- Используйте явные правила.
- Вводите петли обратной связи (каденции).
- Улучшайте и эволюционируйте.

Каденция – термин из музыки. В контексте Канбан-метода она обозначает ритм. Каденциями называют регулярные встречи, которые еще являются петлями обратной связи. Регулярность задает ритм, с которым течет поток работы. 
Каденций семь:
1. Канбан-митинг (ежедневная). Здесь обсуждаем статус заблокированных задач.
2. Встреча по наполнению очереди (обычно раз в две недели). Берем на себя обязательства, что будет делать, как сервис.
3. Встреча по планированию поставки (обычно раз в две недели). Возвращаем выполненные обязательства обратно.
4. Встреча по обзору сервиса (обычно раз в две недели). С метриками обсуждаем качество сервиса и как его улучшить, если нужно.
5. Операционная встреча (обычно раз в месяц). С метриками обсуждаем качество взаимодействия связанных сервисов.
6. Встреча по обзору рисков (обычно раз в месяц). С метрикам обсуждаем влияние заблокированных задач на работу сервиса.
7. Встреча по обзору стратегии (обычно раз в квартал). С метриками обсуждаем изменения в стратегии.

У Канбан-метода есть метрики, которые позволяют ответить на вопросы: какие проблемы в потоке работы, какая пропускная способность у сервиса, какое время выполнения, какое время разрешения блокировок, какое время цикла и по каким типам распределяется работа? 
Все это позволяет менеджеру сервиса принимать решения о развитии и улучшении качества сервиса на основе накопленных данных.

Преимущества и недостатки Kanban?
Преимущества:
+ Гибкость планирования. Система канбан построена таким образом, что команда концентрируется на одной конкретной задаче, несмотря на то, что их может быть несколько. При этом, руководитель может изменять приоритетность работы, не затрагивая рабочий процесс. По завершению одной задачи команда приступает к следующей.
+ Контроль сроков выполнения. Методология канбан позволяет отслеживать рабочий процесс, оптимизировать его длительность и прогнозировать время, которое потребуется для решения будущих задач.
+ Повышение эффективности работы. Многозадачность снижает качество работы и замедляет продвижение вперед. Чем больше зависает нерешенных задач, тем чаще приходится между ними переключаться. Метод канбан минимизирует застои, поскольку помогает быстро выявлять слабые места. Это позволяет сокращать время работы над задачей и повышать качество результата.
+ Наглядность продвижения работы. Одно из главных преимуществ управления процессами по методу канбан. Когда все члены команды имеют доступ к поставленным задачам и результативности продвижения, то легче выявить проблемы и устранить их.

Недостатки:
- Не подходит для долгосрочного планирования. Метод канбан рассчитан на достижение краткосрочных целей. Работа выстраивается на решении актуальных задач, при этом их приоритетность может меняться в зависимости от обстоятельств.
- Не подходит для больших команд. Чем больше человек задействовано в рабочем процессе, тем сложнее контролировать выполнение задач. Поэтому, лучше всего, чтобы в одной команде было не больше десяти человек, в идеале — пять.

Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?
SDLC - это систематизированный процесс, этапы которого охватывают полный жизненный цикл программного обеспечения (Software Lifecycle) и который определяет различные этапы разработки ПО для создания высококачественного программного обеспечения, отвечающего ожиданиям клиентов и для улучшения эффективности разработки. Разработка системы должна быть завершена в заранее определенные сроки и стоимость. Каждая фаза жизненного цикла SDLC имеет свой собственный процесс и результаты, которые используются на следующем этапе.

Обычно он делится на шесть-восемь шагов, но менеджеры проектов могут объединять, декомпозировать или пропускать шаги, в зависимости от скоупа проекта.

1. Сбор и анализ требований (Requirement Gathering and Analysis): 
На этом этапе от клиента собирается вся необходимая информация для разработки продукта в соответствии с их ожиданиями. 
Любые неясности должны быть разрешены сразу на этом этапе. Бизнес-аналитик и менеджер проекта назначили встречу с заказчиком, чтобы собрать всю информацию, например, что заказчик хочет построить, кто будет конечным пользователем, какова цель продукта. 
Перед созданием продукта очень важно понимание или знание продукта. Например, клиент хочет иметь приложение, которое включает денежные транзакции. 
В этом случае требование должно быть четким, например, какие транзакции будут выполняться, как они будут проводиться, в какой валюте они будут проводиться и т. д. 
После того, как сбор требований завершен, проводится анализ для проверки возможности разработки продукта. После четкого понимания требования создается документ SRS (Спецификация требований к программному обеспечению). 
Этот документ должен быть полностью понят разработчикам, а также должен быть рассмотрен заказчиком для использования в будущем;

2. Дизайн (Design): 
На этом этапе требования, собранные в документе SRS, используются в качестве входных данных, и создается архитектура программного обеспечения, которая используется для реализации разработки системы. 
Создаются два вида дизайн-документов:
       - Высокоуровневый дизайн (HLD - High-Level Design):
         Краткое описание и название каждого модуля;
         Краткое описание функциональности каждого модуля;
         Отношения интерфейсов и зависимости между модулями;
         Таблицы базы данных, идентифицированные вместе с их ключевыми элементами;
         Полные архитектурные схемы с подробными сведениями о технологиях.

       - Низкоуровневый дизайн (LLD - Low-Level Design):
         Функциональная логика модулей;
         Таблицы базы данных, которые включают тип и размер;
         Полная детализация интерфейсов;
         Решение всех типов проблем с зависимостями;
         Список сообщений об ошибках;
         Полные входные и выходные значения для каждого модуля.

3. Разработка (Implementation or Coding):  
Реализация / кодирование начинается, как только разработчик получает Design document. Дизайн программного обеспечения переведен в исходный код. На этом этапе реализуются все компоненты программного обеспечения;

4.Тестирование (Testing): 
Тестирование начинается после завершения кодирования и выпуска модулей для тестирования. На этом этапе разработанное программное обеспечение тщательно тестируется, и все обнаруженные дефекты передаются разработчикам для их исправления. Повторное тестирование, регрессионное тестирование проводится до тех пор, пока программное обеспечение не будет соответствовать ожиданиям клиента. Тестировщики обращаются к документу SRS, чтобы убедиться, что программное обеспечение соответствует стандарту заказчика;

5. Развертывание (Deployment): 
После тестирования продукта он развертывается в производственной среде или выполняется первое UAT (пользовательское приемочное тестирование), в зависимости от ожиданий клиента. В случае UAT создается копия производственной среды, и заказчик вместе с разработчиками выполняет тестирование. Если клиент остается доволен, то предоставляет согласие на релиз;

6. Поддержка (Maintenance): 
Основное внимание на этом этапе SDLC уделяется обеспечению того, чтобы потребности продолжали удовлетворяться и чтобы система продолжала работать в соответствии со спецификацией, упомянутой в первом этапе. После того, как система развернута и клиенты начинают использовать разработанную систему следует 3 вида активностей:
Исправление ошибок;
Обновление;
Улучшение.

Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?
STLC – это серия четко определенных действий, которые тестировщики программного обеспечения должны выполнить для обеспечения качества приложения. 
В процессе тестирования необходимо последовательно и систематически выполнять каждый этап, который имеет свои цели и приводит к определенным результатам.

Оно разделено на следующие этапы:
Каждый этап тестирования имеет свои задачи и результаты, которые помогают оценить программное обеспечение и удовлетворить требования пользователей.

1. Анализ требований
Первым шагом STLC является анализ требований. На этом этапе тестировщики анализируют требования к программному обеспечению, чтобы убедиться в их ясности, полноте и возможности проведения тестирования. 
Это важно, чтобы гарантировать, что программное обеспечение разрабатывается в соответствии с требованиями.

На этапе анализа требований выполняются следующие действия:
- Обзор документа с требованиями к программному обеспечению и других соответствующих документов.
- Встреча с заинтересованными сторонами для получения дополнительной информации о требованиях.
- Обнаружение несогласованностей в требованиях.
- Определение потенциальных рисков или проблем, которые могут повлиять на процесс тестирования.
- Создание таблицы, которая помогает отследить связь между требованиями и тест-кейсами.
- В конце этого этапа команда тестирования должна ясно понимать требования к программному обеспечению и возможные проблемы, которые могут повлиять на процесс тестирования.

2. Планирование тестирования
На этом этапе тестировщики создают тест-план, в котором описываются стратегия тестирования, цели, сроки и ресурсы, необходимые для процесса тестирования. 
Тест-план разрабатывается, учитывая требования к ПО и все возможные риски. Также важно определить, какие виды тестирования необходимо провести, чтобы обеспечить успешную реализацию тест-плана.

На этапе планирования тестирования выполняются следующие действия:
- Определение целей тестирования.
- Планирование способов и методов тестирования, которые будут использоваться.
- Определение среды тестирования и необходимых ресурсов.
- Определение тест-кейсов, которые будут выполняться, и тестовых данных, которые будут использоваться.
- Оценка времени и затрат, необходимых для тестирования.
- Определение результатов и этапов тестирования.
- Распределение ролей и обязанностей команды тестирования.
- Рассмотрение и утверждение тест-плана.

К завершению этого этапа команда должна иметь полный план действий, которые необходимо выполнить, и глубокое понимание целей и результатов. 
Это поможет убедиться в том, что процесс тестирования хорошо структурирован и может обеспечить превосходные результаты.

3. Разработка тест-кейсов
На этом этапе команда создает тест-кейсы, которые описывают шаги, необходимые для тестирования программного обеспечения. Тесты должны покрывать все возможные сценарии, чтобы найти как можно больше проблем и ошибок в программе. Качество и эффективность тест-кейсов, разработанных на этом этапе, играют жизненно важную роль для успешного тестирования.

На этапе разработки тест-кейсов выполняются следующие действия:
- Определение тест-кейсов для разработки.
- Создание простых и понятных тест-кейсов.
- Определение ожидаемых результатов для каждого тест-кейса.
- Проверка и валидация тест-кейсов.
- По завершении этого этапа команда тестирования должна иметь набор тест-кейсов, которые помогают проверить все функциональности и возможности программного обеспечения. 
Это гарантирует, что все проблемы будут обнаружены и исправлены до релиза ПО.

4. Настройка тестовой среды
После завершения разработки тест-кейсов начинается этап настройки среды. 
На этом этапе тестировщики устанавливают необходимое оборудование, программное обеспечение и инструменты тестирования, чтобы создать среду, в которой можно эффективно проводить тестирование.

На этапе настройки среды выполняются следующие действия:
- Запуск тест-кейсов и сценариев для выявления дефектов или проблем.
- Запись всех обнаруженных дефектов с указанием их важности, приоритета и подробной информации.
- Подготовка и загрузка тестовых данных в систему для проведения тестирования.
- Установка необходимого оборудования, программного обеспечения и сетевых конфигураций для проведения тестирования.
- Анализ результатов выполнения тестов для определения производительности ПО.
- Повторное тестирование дефектов, обнаруженных в ходе выполнения тестов.
- Создание отчетов о результатах тестирования.

5. Выполнение тестов
Следующим этапом STLC является выполнение тестирования. На этом этапе выполняется тестирование в соответствии с тест-планом и разработанными тест-кейсами. 
Команда тестировщиков выполняет тесты, документирует результаты и сообщает о любых дефектах в приложении.

На этапе выполнения тестирования выполняются следующие действия:
- Выполнение тестов в соответствии с ранее созданным тест-планом.
- Запись результатов тестирования и документирование любых дефектов или проблем, которые были обнаружены во время тестирования.
- Повторное тестирование любых дефектов, чтобы убедиться, что они были устранены.
- Мониторинг и отслеживание дефектов до их полного устранения.
- Результаты этого этапа включают обновленные тест-кейсы, которые отражают результаты тестирования и любые обнаруженные ошибки. Эти результаты документируются и отслеживаются до окончательного устранения ошибок.
- Некоторые команды разработчиков программного обеспечения могут иметь отдельный этап для составления отчетов о тестировании и исправления ошибок. На этом этапе тестировщики рассматривают выявленные дефекты и определяют их приоритетность на основе того, насколько сильно они могут повлиять на программное обеспечение. После устранения проблем они проводят регрессионное тестирование, чтобы убедиться, что исправления не привели к появлению новых багов.

6. Завершение STLC
Завершение тестирования – это заключительный этап STLC, который включает в себя документирование всех действий, связанных с тестированием. 
Его основная цель – убедиться, что все предыдущие этапы завершены, и программное обеспечение готово к релизу.

На этапе завершения тестирования команда тестировщиков получает четкое представление о качестве и надежности программного обеспечения. 
Все дефекты или проблемы, выявленные в ходе тестирования, должны быть устранены. Кроме того, процесс тестирования документируется и записывается для улучшения тестирования в будущем.

Результат завершения STLC обычно включает в себя:
- Финальный отчет, в котором подводится итог всему процессу, включая количество выполненных тест-кейсов, обнаруженные дефекты и процент прохождения/неудач тестов.
- Все найденные дефекты в процессе тестирования отслеживаются и исправляются.
- Тестовая среда очищается, а все тестовые данные архивируются для дальнейшего использования.
- Создается отчет, который содержит информацию о целях, объеме и использованных в тестировании ресурсах.
- Замечания, полученные в результате тестирования, собираются и используются для улучшения последующих процессов тестирования.



