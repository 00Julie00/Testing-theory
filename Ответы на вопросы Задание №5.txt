Что такое Тест план? Что должен описывать тест план?
Какие вы знаете Виды тест планов?


План тестирования (test plan): Документ, описывающий цели, подходы, ресурсы и график запланированных тестовых активностей. Он определяет объекты тестирования, 
свойства для тестирования, задания, ответственных за задания, степень независимости каждого тестировщика, тестовое окружение, метод проектирования тестов, определяет используемые критерии входа и критерии выхода и причины их выбора, 
а также любые риски, требующие планирования на случай чрезвычайных обстоятельств. (IEEE 829)

В то время как стратегия излагает общие принципы или теорию, план детально описывает практические аспекты того, как проект будет протестирован в реальности.
Хотя есть рекомендации по составлению тест плана, нет единственно правильного шаблона или формата для написания тест-планов.

Чаще всего в тест-плане можно встретить следующие параметры:
- Какие ресурсы требуются и когда;
- Когда задачи нужно начинать и заканчивать, и кто их будет выполнять;
- Навыки, необходимые для выполнения задач;
- Инструменты и технологии, поддерживающие план;
- Результаты и когда они будут доставлены;
- Затраты на усилия и необходимые ресурсы;
- Процесс продвижения проекта / процесса по стадиям;
- Риски

В гибких методологиях всё чаще говорят о концепции одностраничного тест-плана, а в случае необходимости дополнений и уточнений просто создаются ссылки на внешние страницы/документы. 
Такой план может быть и в гугл-таблицах, в виде дашборда, mind map.

Виды тест-планов:

1. Мастер Тест-План (Master Test Plan): “Главный план тестирования (master test plan, project test plan): План тестирования, обычно охватывающий несколько уровней тестирования. (ISTQB). 
Это может быть как единственный базовый план, так и главный в иерархии нескольких планов, самый статичный и высокоуровневый. 
Нужен когда:
            - продукт имеет множество релизов или итераций, между которыми сохраняется общая информация, которую нет смысла повторять;
            - различные тестовые команды работают над одним продуктом, выполняя различные задачи, которые необходимо объединить в рамках одного документа;

2. Детальный Тест-план (Phase Test plan): Уровневый план тестирования (level test plan): План тестирования, обычно относящийся к одному уровню тестирования. (ISTQB). 
Детальный план составляется на каждый релиз/итерацию или для каждой команды в рамках проекта и является динамическим, т.е. может претерпевать изменения по необходимости. 
Его основная цель - кратко и доходчиво отразить задачи тестирования. Детальных планов может быть несколько для отдельных модулей ПО или команд тестирования. 
Кроме того, могут быть созданы планы для отдельных уровней тестирования (Level Test Plan) или видов тестирования. В Agile проектах могут быть планы итерационного тестирования (iteration testing plans) для каждой итерации;

3. План приемочных испытаний (Acceptance Test Plan, ПСИ): план приемочного тестирования отличают от обычного плана тестирования факторы, которые приводят к принятию бизнес-решения. 
План приемочного тестирования - это один из жизненно важных документов, который содержит руководство по выполнению приемочного тестирования для конкретного проекта. 
Пишется на основе бизнес-требований (Business Requirements). Ревью этого плана обычно выполняется by Managers/Business Analysts/Customers.

Что такое Чек лист?
Перечислите возможные атрибуты Чек листа
Перечислите варианты статусов при прохождении Чек листа

Контрольный список/лист проверок - это список проверок, которые помогают тестировщику протестировать приложение или отдельные функции. Основная цель чеклиста состоит в том, чтобы вы не забыли проверить всё, что планировали. 
Классический чек лист состоит из:
1-й столбец: заголовки тест-кейсов, структурированные по разделам/функционалу, или любые определенные составителем пункты;
2-й столбец для отметки: pass/fail;
3-й столбец опционально под заметки.

Если чек-лист используется еще и для наглядного отображения хода тестирования (а-ля test run), 2-й столбец может иметь опции: пусто (еще не проверялось)/успех/ошибка/пропущено или заблокировано (например, другим дефектом).

Примеры простых чек-листов из обычной жизни:
- Список проверок при покупке б/у ноутбука;
- Список вещей/дел во время сборов в путешествие;
- Список покупок в магазине.

Чек-лист не обязательно является некоторой заменой тест-кейсов, это более глобальная сущность, в виде которой можно записывать множество планов и предстоящих действий: 
критерии начала и окончания тестирования, проверки перед началом каждой фазы, действия по их завершении, подспорье при исследовательском тестировании, накидать проверок с mind map функционала продукта, шеринг опыта с коллегами и т.п.

Разница между тест-кейсом и чек-листом
Сила тест-кейса в том, что в нем все расписано очень детально, и с помощью тест-кейсов тестировать сможет даже человек, который ни разу не видел тестируемое им приложение. Но создание и поддержка кейсов требует времени, сил и является рутиной. 
Помимо прочего, очевидно, тест-кейс часто подразумевает только один конкретный тест, когда в чек-листе подразумевается целый перечень разных проверок.
Сила чек-листа в том, что он простой. Там нет глубокой детализации, это просто памятка. К тому же, он довольно наглядный с точки зрения отчетности. Минус в том, что другому человеку может быть сложно вникнуть в суть проверок без деталей и шагов. 
Чек-листы стали популярнее с приходом гибких моделей разработки, когда писать детальные кейсы может не быть времени и смысла, т.к. всё меняется слишком быстро, к тому же команда может быть небольшой и расписывать кейсы просто не для кого.

Что такое Тест кейс? Перечислите атрибуты Тест кейса?
Перечислите виды Тест кейсов?

Test case (тест-кейс, тестовый пример/случай) - это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или ее части. 
Более строго - формализованное описание одной показательной проверки на соответствие требованиям прямым или косвенным.

Содержание тест-кейса:
- Идентификатор набора тестов (Test Suite ID): Идентификатор набора тестов, в которых входит этот кейс;
- Идентификатор тестового кейса (Test Case ID): Идентификатор самого кейса;
- Заголовок кейса (Test Case Summary): Краткое и емкое название проводимой проверки;
- Связанное требование (Related Requirement): Идентификатор требования, к которому относится / отслеживается данный тестовый пример;
- Предварительные условия (Prerequisites): Любые предпосылки или предварительные условия, которые должны быть выполнены перед выполнением теста;
- Шаги выполнения (Test Script / Procedure): Шаги выполнения теста;
- Тестовые данные (Test Data): Тестовые данные или ссылки на тестовые данные, которые должны использоваться при проведении теста;
- Ожидаемый результат (Expected Result): результат, который мы ожидаем получить после выполнения шагов теста;
- Статус пройден или не пройден (Status): Другие статусы могут быть «Не выполнено», если тестирование не проводится, и «Заблокировано», если тестирование заблокировано;
- Заметки (Remarks): Любые комментарии к тесту или выполнению теста;
- Создано (Created By): Имя автора тестового примера;
- Дата создания (Date of Creation): Дата создания тестового примера (опционально модификации);
- Выполнено (Executed By): Имя человека, выполнившего тест;
- Дата выполнения (Date of Execution): Дата выполнения теста;
- Тестовое окружение (Test Environment): оборудование / программное обеспечение / сеть, в которых выполнялся тест, т.е. все необходимые сведения об окружении, чтобы можно было воспроизвести полученный результат.

В иностранной литературе часто делят кейсы на две категории:
- Высокоуровневый тест-кейс (high level test case или logical test case) - тест-кейс без конкретных входных данных и ожидаемых результатов. 
Как правило, ограничивается общими идеями и операциями, схож по своей сути с подробно описанным пунктом чек-листа. Достаточно часто встречается в интеграционном тестировании и системном тестировании, а также на уровне smoke. 
Может служить отправной точкой для проведения исследовательского тестирования или для создания низкоуровневых тест-кейсов.

- Низкоуровневый тест-кейс (low level test case) - тест-кейс с конкретными входными данными и ожидаемыми результатами. Представляет собой «полностью готовый к выполнению» тест-кейс и вообще является наиболее классическим видом тест-кейсов. 
Начинающих тестировщиков чаще всего учат писать именно такие тесты, т.к. прописать все данные подробно - намного проще, чем понять, какой информацией можно пренебречь, при этом не снизив ценность тест-кейса.

Существует три вида тест-кейсов:

1. Позитивные, или положительные. Проверяют, что система адекватно реагирует на корректные данные. 
Например, если при регистрации ввести в поле логина существующий, корректно написанный email, еще не зарегистрированный в системе, сайт поймет это правильно и допустит регистрацию.

2. Негативные, или отрицательные. Показывают, что система умеет работать с некорректными данными. Например, если не написать в email значок @ или пропустить точку, сайт сообщит об ошибке и не допустит регистрацию.

3. Деструктивные. Служат для проверки прочности системы. Например, позволяют убедиться, что в поле для email нельзя ввести команду, которая удалит базу данных зарегистрированных пользователей.


Нужно ли вообще писать кейсы? Ответ тот же, что и для любого документа - если написание кейсов решает определенную задачу и это обоснованно, то писать. 
Может ли быть несколько ожидаемых результатов? Может, если это необходимо, но сразу после каждого шага.
Можно ли объединять позитивные и негативные тест-кейсы? Позитивные можно, негативные нельзя, поскольку сложно будет понять, что именно влияет на результат.

Пример тест-кейса:
Тест-кейс для регистрации нового пользователя:
Шаг 1: Открыть страницу регистрации.
Шаг 2: Заполнить поля «Имя», «Фамилия», «E-mail», «Пароль» и «Подтвердите пароль».
Шаг 3: Нажать кнопку «Зарегистрироваться».
Шаг 4: Проверить, что появилось сообщение об успешной регистрации.
Шаг 5: Проверить, что на указанный E-mail было отправлено письмо с подтверждением регистрации.
Шаг 6: Подтвердить регистрацию, перейдя по ссылке в письме.

Что такое Тестовый набор (Test Suite)?
Test Suite - это некоторый набор формализованных Test case, объединенных между собой по общему логическому признаку, которые позволяют проверить одну из частей или вариантов сценария. 
Test Scenario представляет собой некий пользовательский сценарий по тестированию некой функциональности. Что-то, что пользователь может захотеть сделать с вашей системой, и вы хотите это проверить. Сценарий может иметь один или несколько Test Suite.

Что такое Баг репорт? Перечислите атрибуты Баг репорта?
Какое нужно соблюдать правило в баг репорте для хорошего Summary?

Отчет о дефекте (defect report): Документ, содержащий отчет о любом недостатке в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию. (IEEE 829)

Главное при написании отчета - он должен быть сразу и однозначно понят читающим, а дефект однозначно воспроизведен по указанным шагам в указанном окружении.

Основные поля баг-репорта:
- Уникальный идентификатор (ID);
- Описание (Summary): краткое, емкое и понятное описание ошибки;
- Окружение (Environment): ссылка на билд/коммит/версия ПО и всего окружения;
- Шаги воспроизведения (Steps to reproduce): полный перечень шагов для воспроизведения;
- Ожидаемый результат (Expected result): какой результат должен был быть без ошибки;
- Фактический результат (Actual result): какой результат получился на самом деле;
- Вложения (Attachments): логи, скриншоты, видео - всё что необходимо для понимания ошибки.

Дополнительные:
- Предварительные условия (Prerequisites);
- Тестовые данные (Test Data);
- Серьезность дефекта (Defect Severity);
- Комментарии (Remarks);
- Проект (Project);
- Продукт (Product);
- Версия релиза (Release Version);
- Модуль (Module);
- Обнаружено в версии (Detected Build Version);
- Вероятность возникновения дефекта (Defect Probability);
- Приоритет дефекта (Defect Priority);
- Автор отчета (Reported By);
- Назначено на (Assigned To);
- Статус (Status);
- Fixed Build Version.

Несколько ключевых моментов, которые следует учитывать при написании отчета об ошибке:
- В одном отчете один баг;
- Воспроизведите его 2-3 раза;
- Убедитесь, что используете актуальную версию ПО и окружения;
- Проверьте по поиску багтрекинговой системы наличие отчета о таком же дефекте;
- Локализуйте ошибку, чтобы выяснить ее первопричину;
- Напишите подробные шаги и полное окружение для воспроизведения ошибки;
- Напишите хорошее summary дефекта по формуле “Что? Где? При каких условиях?” (3 Ws, WWW - What? Where? When?);
- Следите за словами в процессе написания сообщения об ошибке, они не должны обвинять, оскорблять людей, содержать какую-либо точку зрения по поводу произошедшего. В общем, только факты по делу;
- Проиллюстрируйте проблему с помощью правильных скриншотов, видео и логов;
- Перед отправкой перепроверьте ваш отчет об ошибке. А потом еще раз;

Опишите Жизненный цикл бага

Жизненный цикл дефекта(бага) – это определенный набор состояний, через которые проходит баг в течение всей своей жизни. Цель жизненного цикла бага – в координации работы с багом и легкой передаче его текущего статуса различным ответственным лицам.
Статус бага в его жизненном цикле – это текущее состояние, в котором находится баг. Назначение багам статуса позволяет лучше отслеживать фактический прогресс их жизненного цикла.

Состояния дефекта:

1. Новый (New): Это первое состояние бага в его жизненном цикле. Когда обнаруживается любой новый баг, он переходит в состояние “Новый”, а его валидация и тестирование выполняются на более поздних стадиях жизненного цикла.

2. Назначен (Assigned): На этом этапе заведенный впервые  баг передается команде разработчиков. Разработчика-исполнителя назначает руководитель проекта или менеджер команды тестирования .

3. Открыт (Open): Данный статус присваивается  багу, когда разработчик начинает процесс его анализа и работает над его исправлением, если это необходимо.

Если по мнению разработчика баг неактуален или некорректен, то он может быть переведен в одно из следующих четырех состояний: “Дубликат”(“Duplicate“), “Отложено” (“Deferred”), “Отклонено” (“Rejected”) или “Не ошибка”(“Not a Bug”) на основании определенных фактов. 

4. Исправлен (Fixed): Когда разработчик завершает задачу по исправлению  бага, внося необходимые изменения в код, он изменяет статус  бага на “Исправен”.

5. Ожидание повторного тестирования (Pending Retest): После исправления  бага разработчик передает его тестировщику для повторного тестирования. Пока этого не произойдет, баг остается в статусе “Pending Retest”.

6. Нужен повторный тест (Retest): На этом этапе тестировщик приступает к повторному тестированию бага , чтобы проверить, насколько точно он исправлен разработчиком в соответствии с требованиями.

7. Открыт заново (Reopen): Если в рамках бага какая-либо проблема не была исправлена, он снова передается разработчику, а статус дефекта меняется на “Reopen”.

8. Проверен (Verified): Если тестировщик после проведения повторного тестирования считает, что дефект был исправлен, то статус  бага меняется на “Verified”.

9. Закрыт (Closed): Когда баг больше не существует и полностью исправлен, тестировщик меняет статус дефекта на “Closed”.

Цикл: 
* Тестировщик находит баг.
* Статус, присвоенный багу – “Новый”.
* Баг передается менеджеру проекта для анализа.
* Менеджер проекта решает, является ли баг действительным.
* Здесь баг недействителен – менеджер проекта присваивает багу статус “Отклонен”.
* Если баг не отклонен, то следующим шагом будет проверка того, находится ли он в области действия. Предположим, у нас есть еще одна фича – функционал электронной почты для того же приложения, и вы обнаружили проблему с ней. 
  Но она не является частью текущего релиза. Таким дефектам присваивается статус отложенных.
* Далее менеджер проверяет, не публиковался ли подобный баг ранее. Если да, ему присваивается статус дубликата.
* Если нет, баг назначается разработчику, который приступает к исправлению кода. На этом этапе багу присваивается статус “В процессе”.
* Исправив код, разработчик присваивает багу статус “Исправлен”.
* Далее тестировщик повторно тестирует код. В случае, если тест-кейс проходит, дефект закрывается. Если тест-кейсы снова не работают, дефект снова открывается и передается разработчику.
* Представьте, что во время первого релиза системы бронирования авиабилетов был обнаружен баг в заказе факса, который был исправлен и получил статус закрытого. 
  Во время второго релиза тот же баг снова всплыл на поверхность. В таких случаях закрытый баг будет снова открыт.

Что такое Priority?

Приоритет (priority): Степень важности, присваиваемая объекту. Например, дефекту. (ISTQB) Это атрибут, определяющий скорость устранения бага.

Формула приоритета:
Приоритет — не что иное, как произведение критичности бага на срочность исправления.

Что такое Severity?

Критичность (severity): Важность воздействия конкретного дефекта на разработку или функционирование компонента или системы. (IEEE 610)
Иными словами, серьезность представляет техническое влияние ошибки в контексте работоспособности самого ПО, а приоритет указывает на очередность выполнения задачи или устранения дефекта, т.е. точку зрения бизнеса.

Перечислите классификации Priority

Приоритет бага сперва определяет инициатор, но в дальнейшем он корректируется менеджером продукта. Именно менеджер имеет общее представление о тестируемой системе и понимает, насколько срочно нужно исправить тот или иной баг.

Виды приоритетов:

- Top. Наивысший приоритет. Назначается экстренным ситуациям, которые очень отрицательно влияют на продукт или даже бизнес компании. Такие баги нужно устранять немедленно.

- High. Высокий приоритет. Назначается багам, которые должны быть устранены в первую очередь.

- Normal. Обычный приоритет, назначается по умолчанию. Эти баги устраняются во вторую очередь, в штатном порядке.

- Low. Низкий приоритет. Назначается багам, не влияющим на функционал. Исправление таких багов происходит в последнюю очередь, если есть время и ресурсы.

Перечислите классификации  Severity

Пример классификации серьезности багов:

- Blocker. Блокирующая ошибка. Она делает невозможной всю последующую работу с программой. Для возобновления работы нужно исправить Blocker.

- Critical. Критическая ошибка. Нарушает работу основного функционала. Баг проявляется постоянно и делает невозможным использование основных функций программы.

- Major. Существенный баг. Затрудняет работу основного функционала или делает невозможным использование дополнительных функций.

- Minor. Незначительный баг. На функционал системы влияет относительно мало, затрудняет использование  дополнительных функций. Для обхода этого бага могут быть очевидные пути.

- Trivial. Тривиальный баг. Не влияет на функционал проекта, но ухудшает общее впечатление от работы с продуктом.

Приведите пример Низкого Priority и Высокого Severity

Проблема, которая пока не повлияет на бизнес, но имеет большое влияние с точки зрения функциональности:
Присутствует серьезный баг, но есть workaround и исправление уже может быть запланировано в следующем релизе или функция будет удалена;
Функция генерации годового отчета, которая будет использована только через полгода;
Редкость проявления дефекта/сложность воспроизведения для юзеров.

Приведите пример Низкого Severity и Высокого Priority

Любые minor severity дефекты, которые влияют на взаимодействие с пользователями / репутацию:
Ожидается, что функция покажет пользователю конкретную ошибку по коду ответа. В этом случае функционально код выдает ошибку, но сообщение должно быть более релевантным коду; 
Ошибка в логотипе или названии компании на главной странице, или опечатки, бросающиеся в глаза и способные повлиять на репутацию компании;
Опечатки в контактных данных;
Важные ошибки в соглашениях и юридических документах.


Что такое Матрица соответствия требований (Requirements Traceability Matrix)?

Матрица трассируемости (traceability matrix): Двумерная таблица, описывающая связь двух сущностей (например, требований и тестовых сценариев). 
Таблица позволяет производить прямую и обратную трассировку от одной сущности к другой, обеспечивая таким образом возможность определения покрытия и оценки влияния предполагаемых изменений. (ISTQB)

Матрица трассируемости (Requirement Traceability Matrix AKA Traceability Matrix or Cross Reference Matrix) используется для документирования связей между требованиями и тест-кейсами по этим требованиям и наглядного отображения трассируемости в виде
простой таблицы.
Матрица трассируемости может служить одновременно в качестве матрицы покрытия. Наличие такой матрицы позволяет объективно оценить, какая часть продукта покрыта тестами, а какая нет.

Виды трассируемости:
- Вертикальная трассируемость (vertical traceability): Отслеживание требований через уровни разработки к компонентам. (ISTQB)
- Горизонтальная трассируемость (horizontal traceability): Трассировка требований к уровню тестирования по отношению к уровням документации (например, план тестирования, спецификация проектирования теста, 
  спецификация тестовых сценариев и спецификация процедуры тестирования или автоматизированный сценарий тестирования). (ISTQB)

Пример
RTM актуальна на всех этапах программного проекта. Давайте разберемся с этим через водопадную модель SDLC:

1. RTM начинается вместе с началом фазы сбора требований (Requirements Gathering phase);
2. продолжается через управление требованиями (Requirements Management);
3. проектирование (Design);
4. разработку (Development);
5. тестирование (Testing);
6. внедрение (Implementation);
7. и поддержку (Support).

При прохождении всех этих этапов трассируемость требований поддерживается с помощью этого документа. После того, как требования были внесены в таблицу, детали дизайна для этих требований будут сопоставлены с требованиями. 
На основе этих деталей проекта будет производиться разработка программного обеспечения / модуля. Детали репозитория кода из SVN, TFS, Bitbucket, Github будут сопоставлены. 
Теперь вы знаете, где находится дизайн и код каждого требования. Это трассируемость. Отслеживайте каждое требование от начала до его конечного результата по мере его использования пользователем приложения! 
На этапе поддержки RTM будет чрезвычайно полезен для понимания и решения проблем, пройдя через все соответствующие детали функции / требования.

Что такое Тест-отчет?

Отчет - это документ, содержащий информацию о выполненных действиях, результатах проведённой работы. Обычно он включает в себя таблицы, графики, списки, просто описывающую информацию в виде текста. 
Их пропорция и содержание определяют пользу и понятность отчета.

По времени Тест отчет на сколько типов возможно разделить?

Отчёты могут делиться на два вида относительно времени:

1. (Недельный, дневной, месячный)/ промежуточный.
В общем, это практически тот же финальный отчет, но с измененными приоритетами фокуса и уменьшенной глубиной временной выборки. 
В нем обязательно должны содержаться две главных метрики:
— Оценка степени готовности продукта.
— Оценка проведенных работ по тестированию за время между отчетностями (прогресс).

Этот отчет должен показать какова динамика вашей работы.
Важно помнить, что прогресс – величина не постоянная, а динамическая, она определяется за счет сравнения состояния проекта на прошлой неделе и настоящей. Соответственно прогресс – этот совокупность метрик, позволяющих понять в каком состоянии находится проект.
Они создаются для каждого проекта индивидуально, основываясь на целях, которые ставятся для успешного проведения тестирования. Метрики ставятся при создании ТК (тест-кейсов), прохождении ТК (провален\пройден), обнаружении дефектов (критичность). Они позволяют доступно и достаточно быстро составить общую сравнительную картину по проекту..

2. Есть еще один важный и часто используемые тип временного отчета – версионный (отчет по итерации).
Он схож с итоговым. В нём описываются те задачи, которые были выполнены командой тестирования для конкретной версии продукта.

3. Конечный /финальный.

В финальном отчете важно показать общий взгляд на проделанную работу (в контексте установленных метрик) и эволюцию продукта.
Также, надо дать исчерпывающую информацию о статусе продукта в данный момент (количество оставшихся неисправленных ошибок, полностью ли протестирован продукт или требуется дополнительный цикл тестирования, оценка возможности выпуска продукта во «внешний мир» и т.д).

Что должен показывать Промежуточный отчет?

Отчет о ходе тестирования (test progress report): Документ, подводящий итог задачам и результатам, составляемый с определенной периодичностью с целью сравнения 
прогресса тестирования с базовой версией (например, с исходным планом тестирования) и извещения о рисках и альтернативах, требующих решения руководства. (ISTQB)

Что должен показывать Итоговый отчет?

Итоговый отчет о тестировании (test summary report): Документ, подводящий итог задачам и результатам тестирования, также содержащий оценку соответствующих объектов тестирования относительно критериев выхода. (IEEE 829)
